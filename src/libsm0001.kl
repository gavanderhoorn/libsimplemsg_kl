
-- Copyright (c) 2016, TU Delft Robotics Institute
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.


PROGRAM libsm0001
--------------------------------------------------------------------------------
--
-- ROS-Industrial Simple Message PING (libsm0001) implementation
--
-- author: G.A. vd. Hoorn (TU Delft Robotics Institute)
--
--------------------------------------------------------------------------------
%ALPHABETIZE
%COMMENT = 'ROS//r0'
%NOBUSYLAMP
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR




--------------------------------------------------------------------------------
--
-- remote types & constants
--
--------------------------------------------------------------------------------
%INCLUDE ktype_sz.klt
%INCLUDE simplemsg\simplemsg.klt
%INCLUDE simplemsg\sm_hdr.klt




--------------------------------------------------------------------------------
--
-- local types & constants
--
--------------------------------------------------------------------------------
%INCLUDE simplemsg\msgs\sm0001.klt




--------------------------------------------------------------------------------
--
-- local variables
--
--------------------------------------------------------------------------------
VAR
	msg_len_     : INTEGER




--------------------------------------------------------------------------------
--
-- remote routine prototypes
--
--------------------------------------------------------------------------------
%INCLUDE simplemsg\sm_hdr.klh




--------------------------------------------------------------------------------
--
-- local routine prototypes
--
--------------------------------------------------------------------------------
%INCLUDE simplemsg\msgs\sm0001.klh




--------------------------------------------------------------------------------
--
-- Empty body
--
--------------------------------------------------------------------------------
BEGIN
END libsm0001




ROUTINE sm0001_len
BEGIN
	IF (UNINIT(msg_len_)) THEN
		msg_len_ = ( &
			-- dummy data
			(SM_MAX_JOINT * SZ_REAL))
	ENDIF
	RETURN (msg_len_)
END sm0001_len




ROUTINE sm0001_ctor
BEGIN
	sm0001_rset(this)
END sm0001_ctor




ROUTINE sm0001_rset
VAR
	i__          : INTEGER
BEGIN
	sm_hdr_rset(this.hdr)
	this.hdr.msg_type   = SM0001_ID
	this.hdr.comm_type  = SM_CT_SVCRPL
	this.hdr.reply_type = SM_RT_SUCC

	FOR i__ = 1 TO SM_MAX_JOINT DO
		this.data[i__] = 0.0
	ENDFOR
END sm0001_rset




ROUTINE sm0001_read
VAR
	stat__       : INTEGER
	i__          : INTEGER
BEGIN
	stat__ = 0

	-- NOTE: ONLY fields in msg body are deserialised by this routine,
	--       pkt_len & header are CALLERs reponsibility

	-- dummy data
	READ fd(this.data[ 1], this.data[2], this.data[3],
	        this.data[ 4], this.data[5], this.data[6],
	        this.data[ 7], this.data[8], this.data[9],
	        this.data[10])
	stat__ = IO_STATUS(fd)
	IF (stat__ <> 0) THEN RETURN (-stat__); ENDIF

	-- TODO: perhaps return nr of bytes consumed, so it can be checked
	--       against header.len by caller
	RETURN (-ABS(stat__))
END sm0001_read




ROUTINE sm0001_wrte
VAR
	stat__       : INTEGER
	i__          : INTEGER
BEGIN
	stat__ = 0

	-- NOTE: ONLY fields in msg body are serialised by this routine,
	--       pkt_len & header are CALLERs reponsibility

	-- body fields: dummy data
	WRITE fd(this.data[ 1], this.data[2], this.data[3],
	         this.data[ 4], this.data[5], this.data[6],
	         this.data[ 7], this.data[8], this.data[9],
	         this.data[10])
	stat__ = IO_STATUS(fd)
	IF (stat__ <> 0) THEN RETURN (-stat__); ENDIF

	-- flush write buffer
	WRITE fd(CR)
	stat__ = IO_STATUS(fd)

	-- TODO: perhaps return nr of bytes written, so it can be checked
	--       against header.len by caller
	RETURN (-ABS(stat__))
END sm0001_wrte




--- list routines --------------------------------------------------------------

ROUTINE sm0001l_ctor
BEGIN
	sm0001l_cler(this)
	RETURN (0)
END sm0001l_ctor




ROUTINE sm0001l_size
BEGIN
	RETURN (PATH_LEN(this))
END sm0001l_size




ROUTINE sm0001l_cler
VAR
	i__ : INTEGER
BEGIN
	i__ = sm0001l_size(this)
	-- TODO: why not just use 'i__'?
	WHILE (sm0001l_size(this) > 0) DO
		sm0001l_rmov(this, i__)
		i__ = sm0001l_size(this)
	ENDWHILE
END sm0001l_cler




ROUTINE sm0001l_add
VAR
	stat__ : INTEGER
	tmp__  : INTEGER
BEGIN
	APPEND_NODE(this, stat__)
	-- TODO: check status of operation
	tmp__ = sm0001l_size(this)
	this[tmp__] = e
END sm0001l_add




ROUTINE sm0001l_apnd
BEGIN
	sm0001l_add(this, e)
END sm0001l_apnd




ROUTINE sm0001l_set
VAR
	tmp__  : sm0001_lit_t
	stat__ : INTEGER
BEGIN
	tmp__ = sm0001l_get(this, idx)
	this[idx] = e
	RETURN (tmp__)
END sm0001l_set




ROUTINE sm0001l_get
BEGIN
	RETURN (this[idx])
END sm0001l_get




ROUTINE sm0001l_take
VAR
	tmp__  : sm0001_lit_t
	stat__ : INTEGER
BEGIN
	tmp__ = sm0001l_get(this, idx)
	DELETE_NODE(this, idx, stat__)
	-- TODO: check status of operation
	RETURN (tmp__)
END sm0001l_take




ROUTINE sm0001l_rmov
VAR
	stat__ : INTEGER
BEGIN
	DELETE_NODE(this, idx, stat__)
	-- TODO: check status of operation
END sm0001l_rmov




ROUTINE sm0001l_mpty
BEGIN
	RETURN (sm0001l_size(this) = 0)
END sm0001l_mpty




ROUTINE sm0001l_ins
VAR
	stat__ : INTEGER
BEGIN
	INSERT_NODE(this, idx, stat__)
	-- TODO: check status of operation
	this[idx] = e
END sm0001l_ins


--- /list routines -------------------------------------------------------------
