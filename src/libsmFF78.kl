
-- Copyright (c) 2017, TU Delft Robotics Institute
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.


PROGRAM libsmFF78
--------------------------------------------------------------------------------
--
-- ROS-Industrial Simple Message 'Fanuc Lin with CR' (libsmFF78) implementation
--
-- author: G.A. vd. Hoorn (TU Delft Robotics Institute)
--
--------------------------------------------------------------------------------
%ALPHABETIZE
%COMMENT = 'ROS//r0'
%NOBUSYLAMP
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR




--------------------------------------------------------------------------------
--
-- remote types & constants
--
--------------------------------------------------------------------------------
%INCLUDE ktype_sz.klt
%INCLUDE simplemsg\simplemsg.klt




--------------------------------------------------------------------------------
--
-- local types & constants
--
--------------------------------------------------------------------------------
%INCLUDE simplemsg\msgs\smFF78.klt




--------------------------------------------------------------------------------
--
-- local variables
--
--------------------------------------------------------------------------------
VAR
	msg_len_     : INTEGER




--------------------------------------------------------------------------------
--
-- remote routine prototypes
--
--------------------------------------------------------------------------------
%INCLUDE simplemsg\sm_hdr.klh




--------------------------------------------------------------------------------
--
-- local routine prototypes
--
--------------------------------------------------------------------------------
%INCLUDE simplemsg\msgs\smFF78.klh




--------------------------------------------------------------------------------
--
-- Empty body
--
--------------------------------------------------------------------------------
BEGIN
END libsmFF78




ROUTINE smFF78_len
BEGIN
	IF (UNINIT(msg_len_)) THEN
		msg_len_ = ( &
			-- sequence, vel, cr_, acc
			(4 * SZ_INT) + &
			-- pose
			(SMFF78_POSSZ * SZ_REAL))
	ENDIF
	RETURN (msg_len_)
END smFF78_len




ROUTINE smFF78_ctor
BEGIN
	smFF78_rset(this)
END smFF78_ctor




ROUTINE smFF78_rset
VAR
	i__          : INTEGER
BEGIN
	sm_hdr_rset(this.hdr)
	this.hdr.msg_type   = SMFF78_ID
	this.hdr.comm_type  = SM_CT_INVAL
	this.hdr.reply_type = SM_RT_INVAL

	this.sequence = 0
	this.vel      = 0
	this.cr_      = 0
	this.acc      = 100

	-- always reset all elements in the array
	FOR i__ = 1 TO SMFF78_POSSZ DO
		this.pose[i__] = 0.0
	ENDFOR
END smFF78_rset




ROUTINE smFF78_read
VAR
	stat__       : INTEGER
	i__          : INTEGER
BEGIN
	stat__ = 0

	-- NOTE: ONLY fields in msg body are deserialised by this routine,
	--       pkt_len & header are CALLERs reponsibility

	-- sequence + velocity + CR + ACC
	READ fd(this.sequence, this.vel, this.cr_, this.acc)
	stat__ = IO_STATUS(fd)
	IF (stat__ <> 0) THEN RETURN (-stat__); ENDIF

	-- pose
	FOR i__ = 1 TO SMFF78_POSSZ DO
		READ fd(this.pose[i__])
		stat__ = IO_STATUS(fd)
		IF (stat__ <> 0) THEN RETURN (-stat__); ENDIF
	ENDFOR

	-- TODO: perhaps return nr of bytes consumed, so it can be checked
	--       against header.len by caller
	RETURN (-ABS(stat__))
END smFF78_read




--- list routines --------------------------------------------------------------

ROUTINE smFF78l_ctor
BEGIN
	smFF78l_cler(this)
	RETURN (0)
END smFF78l_ctor




ROUTINE smFF78l_size
BEGIN
	RETURN (PATH_LEN(this))
END smFF78l_size




ROUTINE smFF78l_cler
VAR
	i__ : INTEGER
BEGIN
	i__ = smFF78l_size(this)
	-- TODO: why not just use 'i__'?
	WHILE (smFF78l_size(this) > 0) DO
		smFF78l_rmov(this, i__)
		i__ = smFF78l_size(this)
	ENDWHILE
END smFF78l_cler




ROUTINE smFF78l_add
VAR
	stat__ : INTEGER
	tmp__  : INTEGER
BEGIN
	APPEND_NODE(this, stat__)
	-- TODO: check status of operation
	tmp__ = smFF78l_size(this)
	this[tmp__] = e
END smFF78l_add




ROUTINE smFF78l_apnd
BEGIN
	smFF78l_add(this, e)
END smFF78l_apnd




ROUTINE smFF78l_set
VAR
	tmp__  : smFF78_lit_t
	stat__ : INTEGER
BEGIN
	tmp__ = smFF78l_get(this, idx)
	this[idx] = e
	RETURN (tmp__)
END smFF78l_set




ROUTINE smFF78l_get
BEGIN
	RETURN (this[idx])
END smFF78l_get




ROUTINE smFF78l_take
VAR
	tmp__  : smFF78_lit_t
	stat__ : INTEGER
BEGIN
	tmp__ = smFF78l_get(this, idx)
	DELETE_NODE(this, idx, stat__)
	-- TODO: check status of operation
	RETURN (tmp__)
END smFF78l_take




ROUTINE smFF78l_rmov
VAR
	stat__ : INTEGER
BEGIN
	DELETE_NODE(this, idx, stat__)
	-- TODO: check status of operation
END smFF78l_rmov




ROUTINE smFF78l_mpty
BEGIN
	RETURN (smFF78l_size(this) = 0)
END smFF78l_mpty




ROUTINE smFF78l_ins
VAR
	stat__ : INTEGER
BEGIN
	INSERT_NODE(this, idx, stat__)
	-- TODO: check status of operation
	this[idx] = e
END smFF78l_ins


--- /list routines -------------------------------------------------------------
