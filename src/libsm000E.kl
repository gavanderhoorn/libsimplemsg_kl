
-- Copyright (c) 2016, TU Delft Robotics Institute
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.


PROGRAM libsm000E
--------------------------------------------------------------------------------
--
-- ROS-Industrial Simple Message JOINT_TRAJ_PT_FULL (libsm000E) implementation
--
-- author: G.A. vd. Hoorn (TU Delft Robotics Institute)
--
--------------------------------------------------------------------------------
%ALPHABETIZE
%COMMENT = 'ROS//r0'
%NOBUSYLAMP
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR




--------------------------------------------------------------------------------
--
-- remote types & constants
--
--------------------------------------------------------------------------------
%INCLUDE stdex\ktype_sz.th
%INCLUDE simplemsg\simplemsg.th
%INCLUDE simplemsg\sm_hdr.th




--------------------------------------------------------------------------------
--
-- local types & constants
--
--------------------------------------------------------------------------------
%INCLUDE simplemsg\msgs\sm000E.th




--------------------------------------------------------------------------------
--
-- local variables
--
--------------------------------------------------------------------------------
VAR
	msg_len_     : INTEGER




--------------------------------------------------------------------------------
--
-- remote routine prototypes
--
--------------------------------------------------------------------------------
%INCLUDE simplemsg\sm_hdr.h




--------------------------------------------------------------------------------
--
-- local routine prototypes
--
--------------------------------------------------------------------------------
%INCLUDE simplemsg\msgs\sm000E.h




--------------------------------------------------------------------------------
--
-- Empty body
--
--------------------------------------------------------------------------------
BEGIN
END libsm000E




ROUTINE sm000E_len
BEGIN
	IF (UNINIT(msg_len_)) THEN
		msg_len_ = ( &
			-- id + sequence + valid_fields + time
			(3 * SZ_INT) + (SZ_REAL) + &
			-- positions, velocities, accelerations
			(SM_MAX_JOINT * SZ_REAL * 3))
	ENDIF
	RETURN (msg_len_)
END sm000E_len




ROUTINE sm000E_ctor
BEGIN
	sm000E_rset(this)
END sm000E_ctor




ROUTINE sm000E_rset
VAR
	i__          : INTEGER
BEGIN
	sm_hdr_rset(this.hdr)
	this.hdr.msg_type   = SM000E_ID
	this.hdr.comm_type  = SM_CT_INVAL
	this.hdr.reply_type = SM_RT_INVAL

	this.robot_id     = SM000E_INVID
	this.sequence     = 0
	this.valid_fields = 0
	this.tim_e        = 0.0
	-- always reset all elements in the array
	FOR i__ = 1 TO SM_MAX_JOINT DO
		this.positions[i__] = 0.0
	ENDFOR
	--FOR i__ = 1 TO SM_MAX_JOINT DO
	--	this.velocities[i__] = 0.0
	--ENDFOR
	--FOR i__ = 1 TO SM_MAX_JOINT DO
	--	this.accelrations[i__] = 0.0
	--ENDFOR
END sm000E_rset




ROUTINE sm000E_read
VAR
	stat__       : INTEGER
	i__          : INTEGER
	buf__        : STRING[64]
BEGIN
	stat__ = 0

	-- NOTE: ONLY fields in msg body are deserialised by this routine,
	--       pkt_len & header are CALLERs reponsibility

	-- robot_id + sequence + valid_fields + time
	READ fd(this.robot_id, this.sequence, this.valid_fields, this.tim_e)
	stat__ = IO_STATUS(fd)
	IF (stat__ <> 0) THEN RETURN (-stat__); ENDIF

	-- positions
	FOR i__ = 1 TO SM_MAX_JOINT DO
		READ fd(this.positions[i__])
		stat__ = IO_STATUS(fd)
		IF (stat__ <> 0) THEN RETURN (-stat__); ENDIF
	ENDFOR

	-- message is fixed size, so we deserialise all fields, even if we don't
	-- really support them (velocities, accelerations)

	-- velocities: we ignore these, so read to dummy buffer
	READ fd(buf__::(SM_MAX_JOINT * SZ_REAL))
	stat__ = IO_STATUS(fd)
	IF (stat__ <> 0) THEN RETURN (-stat__); ENDIF

	-- accelerations: we ignore these, so read to dummy buffer
	READ fd(buf__::(SM_MAX_JOINT * SZ_REAL))
	stat__ = IO_STATUS(fd)
	IF (stat__ <> 0) THEN RETURN (-stat__); ENDIF

	-- TODO: perhaps return nr of bytes consumed, so it can be checked
	--       against header.len by caller
	RETURN (-ABS(stat__))
END sm000E_read




--- list routines --------------------------------------------------------------

ROUTINE sm000El_ctor
BEGIN
	sm000El_cler(this)
	RETURN (0)
END sm000El_ctor




ROUTINE sm000El_size
BEGIN
	RETURN (PATH_LEN(this))
END sm000El_size




ROUTINE sm000El_cler
VAR
	i__ : INTEGER
BEGIN
	i__ = sm000El_size(this)
	-- TODO: why not just use 'i__'?
	WHILE (sm000El_size(this) > 0) DO
		sm000El_rmov(this, i__)
		i__ = sm000El_size(this)
	ENDWHILE
END sm000El_cler




ROUTINE sm000El_add
VAR
	stat__ : INTEGER
	tmp__  : INTEGER
BEGIN
	APPEND_NODE(this, stat__)
	-- TODO: check status of operation
	tmp__ = sm000El_size(this)
	this[tmp__] = e
END sm000El_add




ROUTINE sm000El_apnd
BEGIN
	sm000El_add(this, e)
END sm000El_apnd




ROUTINE sm000El_set
VAR
	tmp__  : sm000E_lit_t
	stat__ : INTEGER
BEGIN
	tmp__ = sm000El_get(this, idx)
	this[idx] = e
	RETURN (tmp__)
END sm000El_set




ROUTINE sm000El_get
BEGIN
	RETURN (this[idx])
END sm000El_get




ROUTINE sm000El_take
VAR
	tmp__  : sm000E_lit_t
	stat__ : INTEGER
BEGIN
	tmp__ = sm000El_get(this, idx)
	DELETE_NODE(this, idx, stat__)
	-- TODO: check status of operation
	RETURN (tmp__)
END sm000El_take




ROUTINE sm000El_rmov
VAR
	stat__ : INTEGER
BEGIN
	DELETE_NODE(this, idx, stat__)
	-- TODO: check status of operation
END sm000El_rmov




ROUTINE sm000El_mpty
BEGIN
	RETURN (sm000El_size(this) = 0)
END sm000El_mpty




ROUTINE sm000El_ins
VAR
	stat__ : INTEGER
BEGIN
	INSERT_NODE(this, idx, stat__)
	-- TODO: check status of operation
	this[idx] = e
END sm000El_ins


--- /list routines -------------------------------------------------------------
