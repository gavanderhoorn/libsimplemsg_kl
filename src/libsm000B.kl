
-- Copyright (c) 2016, TU Delft Robotics Institute
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.


PROGRAM libsm000B
--------------------------------------------------------------------------------
--
-- ROS-Industrial Simple Message Joint Trajectory Point (libsm000B)
-- implementation
--
-- author: G.A. vd. Hoorn (TU Delft Robotics Institute)
--
--------------------------------------------------------------------------------
%ALPHABETIZE
%COMMENT = 'ROS//r0'
%NOBUSYLAMP
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR




--------------------------------------------------------------------------------
--
-- remote types & constants
--
--------------------------------------------------------------------------------
%INCLUDE stdex\ktype_sz.th
%INCLUDE simplemsg\simplemsg.th
%INCLUDE simplemsg\sm_hdr.th




--------------------------------------------------------------------------------
--
-- local types & constants
--
--------------------------------------------------------------------------------
%INCLUDE simplemsg\msgs\sm000B.th




--------------------------------------------------------------------------------
--
-- local variables
--
--------------------------------------------------------------------------------
VAR
	msg_len_     : INTEGER




--------------------------------------------------------------------------------
--
-- remote routine prototypes
--
--------------------------------------------------------------------------------
%INCLUDE simplemsg\sm_hdr.h




--------------------------------------------------------------------------------
--
-- local routine prototypes
--
--------------------------------------------------------------------------------
%INCLUDE simplemsg\msgs\sm000B.h




--------------------------------------------------------------------------------
--
-- Empty body
--
--------------------------------------------------------------------------------
BEGIN
END libsm000B




ROUTINE sm000B_len
BEGIN
	IF (UNINIT(msg_len_)) THEN
		msg_len_ = ( &
			-- sequence nr
			(1 * SZ_INT) + &
			-- joint data
			(10 * SZ_REAL) + &
			-- velocity & duration)
			(2 * SZ_REAL))
	ENDIF
	RETURN (msg_len_)
END sm000B_len




ROUTINE sm000B_ctor
BEGIN
	sm000B_rset(this)
END sm000B_ctor




ROUTINE sm000B_rset
VAR
	i__          : INTEGER
BEGIN
	sm_hdr_rset(this.hdr)
	this.hdr.msg_type   = SM000B_ID
	this.hdr.comm_type  = SM_CT_INVAL
	this.hdr.reply_type = SM_RT_INVAL

	this.sequence = 0
	FOR i__ = 1 TO SM_MAX_JOINT DO
		this.joint_data[i__] = 0.0
	ENDFOR
	this.velocity = 0.0
	this.duration = 0.0
END sm000B_rset




ROUTINE sm000B_read
VAR
	stat__       : INTEGER
BEGIN
	stat__ = 0

	-- NOTE: ONLY fields in msg body are deserialised by this routine,
	--       pkt_len & header are CALLERs reponsibility

	-- sequence + joint_data
	READ fd(this.sequence,
	        this.joint_data[ 1], this.joint_data[2], this.joint_data[3],
	        this.joint_data[ 4], this.joint_data[5], this.joint_data[6],
	        this.joint_data[ 7], this.joint_data[8], this.joint_data[9],
	        this.joint_data[10])
	stat__ = IO_STATUS(fd)
	IF (stat__ <> 0) THEN RETURN (-stat__); ENDIF

	-- velocity and duration
	READ fd(this.velocity, this.duration)
	stat__ = IO_STATUS(fd)
	IF (stat__ <> 0) THEN RETURN (-stat__); ENDIF

	-- TODO: perhaps return nr of bytes consumed, so it can be checked
	--       against header.len by caller
	RETURN (-ABS(stat__))
END sm000B_read




--- list routines --------------------------------------------------------------

ROUTINE sm000Bl_ctor
BEGIN
	sm000Bl_cler(this)
	RETURN (0)
END sm000Bl_ctor




ROUTINE sm000Bl_size
BEGIN
	RETURN (PATH_LEN(this))
END sm000Bl_size




ROUTINE sm000Bl_cler
VAR
	i__ : INTEGER
BEGIN
	i__ = sm000Bl_size(this)
	-- TODO: why not just use 'i__'?
	WHILE (sm000Bl_size(this) > 0) DO
		sm000Bl_rmov(this, i__)
		i__ = sm000Bl_size(this)
	ENDWHILE
END sm000Bl_cler




ROUTINE sm000Bl_add
VAR
	stat__ : INTEGER
	tmp__  : INTEGER
BEGIN
	APPEND_NODE(this, stat__)
	-- TODO: check status of operation
	tmp__ = sm000Bl_size(this)
	this[tmp__] = e
END sm000Bl_add




ROUTINE sm000Bl_apnd
BEGIN
	sm000Bl_add(this, e)
END sm000Bl_apnd




ROUTINE sm000Bl_set
VAR
	tmp__  : sm000B_lit_t
	stat__ : INTEGER
BEGIN
	tmp__ = sm000Bl_get(this, idx)
	this[idx] = e
	RETURN (tmp__)
END sm000Bl_set




ROUTINE sm000Bl_get
BEGIN
	RETURN (this[idx])
END sm000Bl_get




ROUTINE sm000Bl_take
VAR
	tmp__  : sm000B_lit_t
	stat__ : INTEGER
BEGIN
	tmp__ = sm000Bl_get(this, idx)
	DELETE_NODE(this, idx, stat__)
	-- TODO: check status of operation
	RETURN (tmp__)
END sm000Bl_take




ROUTINE sm000Bl_rmov
VAR
	stat__ : INTEGER
BEGIN
	DELETE_NODE(this, idx, stat__)
	-- TODO: check status of operation
END sm000Bl_rmov




ROUTINE sm000Bl_mpty
BEGIN
	RETURN (sm000Bl_size(this) = 0)
END sm000Bl_mpty




ROUTINE sm000Bl_ins
VAR
	stat__ : INTEGER
BEGIN
	INSERT_NODE(this, idx, stat__)
	-- TODO: check status of operation
	this[idx] = e
END sm000Bl_ins


--- /list routines -------------------------------------------------------------
